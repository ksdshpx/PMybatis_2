<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ksdshpx.mybatis.dao.EmployeeMapper">
	<!-- 
		namespace:指定为接口的全类名
	 -->
	 <!-- 
		配置二级缓存
		eviction:缓存的回收策略(默认的是 LRU。)
		    • LRU – 最近最少使用的：移除最长时间不被使用的对象。
			• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
			• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
			• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
			
		flushInterval:缓存刷新间隔，即缓存多长时间清空一次，默认不清空，可以设置一个毫秒值
		
		readOnly:缓存是否只读(默认为false)
			true:只读，mybatis认为所有从缓存中获取数据的操作都只是只读操作，不会修改数据
			     mybatis为了加快获取速度，直接将数据在缓存中的引用交给用户。不安全，速度快。
			false:非只读，mybatis觉得获取的数据可能会被修改。
			      mybatis会使用序列化和反序列化的技术克隆一份新的数据给用户。安全，速度慢
			      
		size:缓存存放多少元素
		
		type:指定自定义的缓存(实现Cache接口即可)全类名
	 -->
	<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>
	<select id="selectEmp" resultType="cn.ksdshpx.mybatis.beans.Employee">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- public Employee getEmployeeById(Integer id); -->
	<select id="getEmployeeById" resultType="employee" databaseId="mysql">
		select id,last_name as lastName,gender,email from tbl_employee where id = #{id}
	</select>
	
	<select id="getEmployeeById" resultType="employee" databaseId="oracle">
		select empno as id,ename as lastName from emp where empno = #{id}
	</select>
	
	<!-- public void addEmployee(Employee employee); 
		parameterType:可以省略
		mysql支持自增主键，自增主键值的获取，MyBatis也是利用Statement.getGeneratedKeys()
		useGeneratedKeys="true":使用自增主键获取主键值策略
		keyProperty:指定对应的主键属性，也就是MyBatis获取到主键值以后，将这个值封装给JavaBean的哪个属性
	-->
	<insert id="addEmployee" parameterType="cn.ksdshpx.mybatis.beans.Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
		insert into tbl_employee(last_name,email,gender) values (#{lastName},#{email},#{gender})
	</insert>
	<!-- public void updateEmployee(Employee employee); -->
    <update id="updateEmployee">
    	update tbl_employee set last_name=#{lastName},email=#{email},gender=#{gender} where id=#{id}
    </update>
	<!-- public void deleteEmployeeById(Integer id); -->
	<delete id="deleteEmployeeById">
		delete from tbl_employee where id = #{id}
	</delete>
	
	<!-- public Employee getEmployeeByIdAndLastName(Integer id, String lastName); -->
	<select id="getEmployeeByIdAndLastName" resultType="cn.ksdshpx.mybatis.beans.Employee">
		<!-- 
			多个参数方式一
			select * from tbl_employee where id = #{param1} and last_name = #{param2} 
		-->
		<!-- 
			多个参数方式二
			select * from tbl_employee where id = #{0} and last_name = #{1} 
		-->
		<!-- 命名参数 -->
		select * from tbl_employee where id = #{id} and last_name = #{lastName} 
	</select>
	
	<!-- public Employee getEmployeeByMap(Map<String,Object> map); -->
	<select id="getEmployeeByMap" resultType="cn.ksdshpx.mybatis.beans.Employee">
		select * from tbl_employee where id = #{id} and last_name = #{lastName} 
	</select>
	
	<!-- public List<Employee> getEmps(); 
		resultType:返回值为集合中元素的类型
	-->
	<select id="getEmps" resultType="cn.ksdshpx.mybatis.beans.Employee">
		select * from tbl_employee
	</select>
	
	<!-- public Map<String,Object> getEmpByIdReturnMap(Integer id); -->
	<select id="getEmpByIdReturnMap" resultType="map">
		select * from tbl_employee where id = #{id}
	</select>
	
	<!-- public Map<Integer,Employee> getEmpsReturnMap(); -->
	<select id="getEmpsReturnMap" resultType="cn.ksdshpx.mybatis.beans.Employee">
		select * from tbl_employee
	</select>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="cn.ksdshpx.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- public List<Employee> getEmpsByCondition(Employee employee); -->
	<select id="getEmpsByCondition"
		resultType="cn.ksdshpx.mybatis.beans.Employee">
		select *
		from tbl_employee
		<where>
			<if test="id!=null">
				id = #{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				and last_name = #{lastName}
			</if>
			<if test="email!=null and email!=''">
				and email = #{email}
			</if>
			<if test="gender==0 or gender==1">
				and gender = #{gender}
			</if>
		</where>
	</select>

	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim"
		resultType="cn.ksdshpx.mybatis.beans.Employee">
		select *
		from tbl_employee
		<!-- prefix:前缀，trim标签体中是整个字符串拼串后的结果，prefix就是给整个字符串加一个前缀 prefixOverrides:前缀覆盖，去掉整个字符串前面多余的字符 
			suffix:后缀，给拼串后的字符串加一个后缀 suffixOverrides:后缀覆盖，去掉整个字符串后面多余的字符 -->
		<trim prefix="where" prefixOverrides="" suffix=""
			suffixOverrides="and">
			<if test="id!=null">
				id = #{id} and
			</if>
			<if test="lastName!=null and lastName!=''">
				last_name = #{lastName} and
			</if>
			<if test="email!=null and email!=''">
				email = #{email} and
			</if>
			<if test="gender==0 or gender==1">
				gender = #{gender}
			</if>
		</trim>
	</select>

	<!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	<select id="getEmpsByConditionChoose"
		resultType="cn.ksdshpx.mybatis.beans.Employee">
		select *
		from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
					id = #{id}
				</when>
				<when test="lastName!=null">
					last_name = #{lastName}
				</when>
				<when test="email!=null">
					email = #{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>
		</where>
	</select>

	<!-- public void updateEmployee(Employee employee); -->
	<update id="updateEmployee">
		update tbl_employee 
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</set>
		where id=#{id}
	</update>
	
	<!-- 批量保存(mysql) mysql支持语法 insert into xxx values(),(),()-->
	<!-- public void addEmps(@Param("emps") List<Employee> emps); -->
	<insert id="addEmps">
		insert into tbl_employee(last_name,gender,email) values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.gender},#{emp.email})
		</foreach>
	</insert>
	
	<!-- 批量保存(oracle)-->
	<!-- public void addEmps(@Param("emps") List<Employee> emps); -->
	<insert id="addEmps" databaseId="oracle">
		<foreach collection="emps" item="emp" open="begin" close="end;">
			insert into emp(empno,ename,job) values
				(#{emp.id},#{emp.lastName},#{emp.gender});
		</foreach>
	</insert>
	
	<!-- 两个内置参数
		 不只是方法传递过来的参数可以用来被判断，取值等操作
		 mybatis默认还有两个内置参数
		 1)_parameter:代表整个参数
		 		单个参数:_parameter就是这个参数
		 		多个参数:参数会封装为一个map，_parameter就是代表这个map
		 2)_databaseId:如果配置了databaseIdProvider标签,_databaseId就是代表当前数据库别名
	 -->
	 
	 <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	 <select id="getEmpsTestInnerParameter" resultType="cn.ksdshpx.mybatis.beans.Employee">
	 	<!-- bind:可以将ognl表达式的值绑定到一个变量中，方便以后使用 -->
	 	<bind name="_lastName" value="'%'+lastName+'%'"/>
	 	<if test="_databaseId=='mysql'">
	 		select * from tbl_employee
	 		<if test="_parameter!=null">
	 			where last_name like #{_lastName}
	 		</if>
	 	</if>
	 	<if test="_databaseId=='oracle'">
	 		select empno as id,ename as lastName from emp
	 	</if>
	 </select>
</mapper>